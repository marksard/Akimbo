/*!
 * MultiFilter
 * The code is based on the following: 
 * https://www.utsbox.com/?page_id=728
 */

#pragma once
#include <Arduino.h>

// --------------------------------------------------------------------------------
// MultiFilter
// --------------------------------------------------------------------------------
class MultiFilter
{
private:
	// フィルタの係数
	float a0, a1, a2, b0, b1, b2;
	// バッファ
	float out1, out2;
	float in1, in2;
	float samplingRate;

public:
	// --------------------------------------------------------------------------------
	// コンストラクタ
	// --------------------------------------------------------------------------------
	MultiFilter(float samplingRate = 44100.0)
	{
		this->samplingRate = samplingRate;
		// メンバー変数を初期化
		a0 = 1.0f; // 0以外にしておかないと除算でエラーになる
		a1 = 0.0f;
		a2 = 0.0f;
		b0 = 1.0f;
		b1 = 0.0f;
		b2 = 0.0f;

		in1 = 0.0f;
		in2 = 0.0f;

		out1 = 0.0f;
		out2 = 0.0f;
	}

	// --------------------------------------------------------------------------------
	// 入力信号にフィルタを適用する関数
	// --------------------------------------------------------------------------------
	float Process(float in)
	{
		// 入力信号にフィルタを適用し、出力信号変数に保存。
		// float out = b0 / a0 * in + b1 / a0 * in1 + b2 / a0 * in2
		// 	- a1 / a0 * out1 - a2 / a0 * out2;
		float a0_inv = 1.0 / a0;
		float out = (b0 * in + b1 * in1 + b2 * in2 - a1 * out1 - a2 * out2) * a0_inv;

		in2 = in1; // 2つ前の入力信号を更新
		in1 = in;  // 1つ前の入力信号を更新

		out2 = out1; // 2つ前の出力信号を更新
		out1 = out;	 // 1つ前の出力信号を更新

		// 出力信号を返す
		return out;
	}

	// --------------------------------------------------------------------------------
	// フィルタ係数を計算するメンバー関数
	// --------------------------------------------------------------------------------
	void LowPass(float freq, float q)
	{
		// フィルタ係数計算で使用する中間値を求める。
		float omega = 2.0f * 3.14159265f * freq / samplingRate;
		float alpha = sin(omega) / (2.0f * q);

		// フィルタ係数を求める。
		a0 = 1.0f + alpha;
		a1 = -2.0f * cos(omega);
		a2 = 1.0f - alpha;
		b0 = (1.0f - cos(omega)) / 2.0f;
		b1 = 1.0f - cos(omega);
		b2 = (1.0f - cos(omega)) / 2.0f;
	}
};